{"ast":null,"code":"var _jsxFileName = \"D:\\\\full stack mern,mean,java\\\\Whiteboard Application\\\\whiteboard-frontend\\\\src\\\\pages\\\\Room\\\\ClientRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ClientRoom = ({\n  socket\n}) => {\n  _s();\n  const imgRef = useRef(null);\n  const [imageURL, setImageURL] = useState(\"\");\n  useEffect(() => {\n    // Listen for canvasImage event from the server and update image URL\n    socket.on(\"canvasImage\", data => {\n      if (data && data.imageURL) {\n        setImageURL(data.imageURL);\n      } else {\n        alert(\"Invalid image data received\");\n      }\n    });\n\n    // Clean up the socket event listener on unmount\n    return () => {\n      socket.off(\"canvasImage\");\n    };\n  }, [socket]);\n\n  // Handle drawing logic here (for receiving drawing data from the server)\n  useEffect(() => {\n    socket.on(\"draw\", data => {\n      // Handle drawing data received from the server\n      // Implement the logic to update the canvas with the received drawing data\n      // For example, update the image URL or draw on the canvas based on the data\n      // setImageURL(data); // Example: Update image URL based on data received\n      // Your logic here for handling drawing data\n    });\n\n    // Clean up the socket event listener on unmount\n    return () => {\n      socket.off(\"draw\");\n    };\n  }, [socket]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-md-8 overflow-hidden border border-dark px-0 mx-auto mt-3\",\n      style: {\n        height: \"500px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"w-100 h-100\",\n        ref: imgRef,\n        src: imageURL,\n        alt: \"canvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(ClientRoom, \"Ahb61oRvvj/srNg1h+ZPxoujXTM=\");\n_c = ClientRoom;\nexport default ClientRoom;\nvar _c;\n$RefreshReg$(_c, \"ClientRoom\");","map":{"version":3,"names":["React","useEffect","useRef","useState","toast","jsxDEV","_jsxDEV","ClientRoom","socket","_s","imgRef","imageURL","setImageURL","on","data","alert","off","className","children","style","height","ref","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/full stack mern,mean,java/Whiteboard Application/whiteboard-frontend/src/pages/Room/ClientRoom.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst ClientRoom = ({ socket }) => {\r\n  const imgRef = useRef(null);\r\n  const [imageURL, setImageURL] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    // Listen for canvasImage event from the server and update image URL\r\n    socket.on(\"canvasImage\", (data) => {\r\n      if (data && data.imageURL) {\r\n        setImageURL(data.imageURL);\r\n      } else {\r\n        alert(\"Invalid image data received\");\r\n      }\r\n    });\r\n\r\n    // Clean up the socket event listener on unmount\r\n    return () => {\r\n      socket.off(\"canvasImage\");\r\n    };\r\n  }, [socket]);\r\n\r\n  // Handle drawing logic here (for receiving drawing data from the server)\r\n  useEffect(() => {\r\n    socket.on(\"draw\", (data) => {\r\n      // Handle drawing data received from the server\r\n      // Implement the logic to update the canvas with the received drawing data\r\n      // For example, update the image URL or draw on the canvas based on the data\r\n      // setImageURL(data); // Example: Update image URL based on data received\r\n      // Your logic here for handling drawing data\r\n    });\r\n\r\n    // Clean up the socket event listener on unmount\r\n    return () => {\r\n      socket.off(\"draw\");\r\n    };\r\n  }, [socket]);\r\n\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      {/* Other elements */}\r\n      <div className=\"col-md-8 overflow-hidden border border-dark px-0 mx-auto mt-3\" style={{ height: \"500px\" }}>\r\n        {/* Display the canvas image */}\r\n        <img className=\"w-100 h-100\" ref={imgRef} src={imageURL} alt=\"canvas\" />\r\n      </div>\r\n      {/* Other elements */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ClientRoom;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,SAASC,KAAK,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,UAAU,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EACjC,MAAMC,MAAM,GAAGR,MAAM,CAAC,IAAI,CAAC;EAC3B,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE5CF,SAAS,CAAC,MAAM;IACd;IACAO,MAAM,CAACK,EAAE,CAAC,aAAa,EAAGC,IAAI,IAAK;MACjC,IAAIA,IAAI,IAAIA,IAAI,CAACH,QAAQ,EAAE;QACzBC,WAAW,CAACE,IAAI,CAACH,QAAQ,CAAC;MAC5B,CAAC,MAAM;QACLI,KAAK,CAAC,6BAA6B,CAAC;MACtC;IACF,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACXP,MAAM,CAACQ,GAAG,CAAC,aAAa,CAAC;IAC3B,CAAC;EACH,CAAC,EAAE,CAACR,MAAM,CAAC,CAAC;;EAEZ;EACAP,SAAS,CAAC,MAAM;IACdO,MAAM,CAACK,EAAE,CAAC,MAAM,EAAGC,IAAI,IAAK;MAC1B;MACA;MACA;MACA;MACA;IAAA,CACD,CAAC;;IAEF;IACA,OAAO,MAAM;MACXN,MAAM,CAACQ,GAAG,CAAC,MAAM,CAAC;IACpB,CAAC;EACH,CAAC,EAAE,CAACR,MAAM,CAAC,CAAC;EAEZ,oBACEF,OAAA;IAAKW,SAAS,EAAC,iBAAiB;IAAAC,QAAA,eAE9BZ,OAAA;MAAKW,SAAS,EAAC,+DAA+D;MAACE,KAAK,EAAE;QAAEC,MAAM,EAAE;MAAQ,CAAE;MAAAF,QAAA,eAExGZ,OAAA;QAAKW,SAAS,EAAC,aAAa;QAACI,GAAG,EAAEX,MAAO;QAACY,GAAG,EAAEX,QAAS;QAACY,GAAG,EAAC;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEH,CAAC;AAEV,CAAC;AAAClB,EAAA,CA9CIF,UAAU;AAAAqB,EAAA,GAAVrB,UAAU;AAgDhB,eAAeA,UAAU;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}