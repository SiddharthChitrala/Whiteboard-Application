{"ast":null,"code":"var _jsxFileName = \"D:\\\\full stack mern,mean,java\\\\Whiteboard Application\\\\whiteboard-frontend\\\\src\\\\pages\\\\canvas\\\\WhiteboardRoom.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport rough from \"roughjs/bundled/rough.esm\";\nimport getStroke from \"perfect-freehand\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WhiteboardRoom = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const [elements, setElements] = useState([]);\n  const [tool, setTool] = useState(\"pencil\");\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    const generator = rough.generator();\n    const roughCanvas = rough.canvas(canvas);\n    const handleMouseDown = event => {\n      // Handle mouse down event based on selected tool (pencil in this case)\n      // This is just a basic implementation, modify as per your requirements\n      const {\n        offsetX,\n        offsetY\n      } = event.nativeEvent;\n      const id = elements.length;\n      if (tool === \"pencil\") {\n        const newElement = {\n          id,\n          type: \"pencil\",\n          points: [{\n            x: offsetX,\n            y: offsetY\n          }]\n        };\n        setElements([...elements, newElement]);\n      }\n    };\n    const handleMouseMove = event => {\n      // Handle mouse move event (e.g., drawing lines)\n      // This is just a basic implementation, modify as per your requirements\n      const {\n        offsetX,\n        offsetY\n      } = event.nativeEvent;\n      if (tool === \"pencil\") {\n        if (elements.length > 0) {\n          const index = elements.length - 1;\n          const updatedElements = [...elements];\n          updatedElements[index].points.push({\n            x: offsetX,\n            y: offsetY\n          });\n          setElements(updatedElements);\n        }\n      }\n    };\n    const handleMouseUp = () => {\n      // Handle mouse up event (e.g., stop drawing)\n      // This is just a basic implementation, modify as per your requirements\n      // You can also update the state, etc.\n    };\n    canvas.addEventListener(\"mousedown\", handleMouseDown);\n    canvas.addEventListener(\"mousemove\", handleMouseMove);\n    canvas.addEventListener(\"mouseup\", handleMouseUp);\n    return () => {\n      canvas.removeEventListener(\"mousedown\", handleMouseDown);\n      canvas.removeEventListener(\"mousemove\", handleMouseMove);\n      canvas.removeEventListener(\"mouseup\", handleMouseUp);\n    };\n  }, [elements, tool]);\n  useEffect(() => {\n    // Draw elements on the canvas using the context API\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    elements.forEach(element => {\n      if (element.type === \"pencil\") {\n        const stroke = getStroke(element.points);\n        const d = getSvgPathFromStroke(stroke);\n        context.fill(new Path2D(d));\n      }\n      // Add other drawing logic for different element types (lines, rectangles, etc.)\n    });\n  }, [elements]);\n  const getSvgPathFromStroke = stroke => {\n    // Function to convert stroke to SVG path (you can use your own method here)\n    // Example implementation:\n    if (!stroke.length) return \"\";\n    const d = stroke.reduce((acc, [x0, y0], i, arr) => {\n      const [x1, y1] = arr[(i + 1) % arr.length];\n      acc.push(x0, y0, (x0 + x1) / 2, (y0 + y1) / 2);\n      return acc;\n    }, [\"M\", ...stroke[0], \"Q\"]);\n    d.push(\"Z\");\n    return d.join(\" \");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: 800,\n      height: 600,\n      style: {\n        border: \"1px solid black\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Tool:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: tool,\n          onChange: e => setTool(e.target.value),\n          children: /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"pencil\",\n            children: \"Pencil\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n_s(WhiteboardRoom, \"6yIH9idOebYYxvtP2mfGhJQaoHY=\");\n_c = WhiteboardRoom;\nexport default WhiteboardRoom;\nvar _c;\n$RefreshReg$(_c, \"WhiteboardRoom\");","map":{"version":3,"names":["React","useEffect","useRef","useState","rough","getStroke","jsxDEV","_jsxDEV","WhiteboardRoom","_s","canvasRef","elements","setElements","tool","setTool","canvas","current","context","getContext","generator","roughCanvas","handleMouseDown","event","offsetX","offsetY","nativeEvent","id","length","newElement","type","points","x","y","handleMouseMove","index","updatedElements","push","handleMouseUp","addEventListener","removeEventListener","clearRect","width","height","forEach","element","stroke","d","getSvgPathFromStroke","fill","Path2D","reduce","acc","x0","y0","i","arr","x1","y1","join","children","ref","style","border","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","_c","$RefreshReg$"],"sources":["D:/full stack mern,mean,java/Whiteboard Application/whiteboard-frontend/src/pages/canvas/WhiteboardRoom.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport rough from \"roughjs/bundled/rough.esm\";\r\nimport getStroke from \"perfect-freehand\";\r\n\r\nconst WhiteboardRoom = () => {\r\n  const canvasRef = useRef(null);\r\n  const [elements, setElements] = useState([]);\r\n  const [tool, setTool] = useState(\"pencil\");\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const context = canvas.getContext(\"2d\");\r\n    const generator = rough.generator();\r\n    const roughCanvas = rough.canvas(canvas);\r\n\r\n    const handleMouseDown = (event) => {\r\n      // Handle mouse down event based on selected tool (pencil in this case)\r\n      // This is just a basic implementation, modify as per your requirements\r\n      const { offsetX, offsetY } = event.nativeEvent;\r\n      const id = elements.length;\r\n      if (tool === \"pencil\") {\r\n        const newElement = {\r\n          id,\r\n          type: \"pencil\",\r\n          points: [{ x: offsetX, y: offsetY }],\r\n        };\r\n        setElements([...elements, newElement]);\r\n      }\r\n    };\r\n\r\n    const handleMouseMove = (event) => {\r\n      // Handle mouse move event (e.g., drawing lines)\r\n      // This is just a basic implementation, modify as per your requirements\r\n      const { offsetX, offsetY } = event.nativeEvent;\r\n      if (tool === \"pencil\") {\r\n        if (elements.length > 0) {\r\n          const index = elements.length - 1;\r\n          const updatedElements = [...elements];\r\n          updatedElements[index].points.push({ x: offsetX, y: offsetY });\r\n          setElements(updatedElements);\r\n        }\r\n      }\r\n    };\r\n\r\n    const handleMouseUp = () => {\r\n      // Handle mouse up event (e.g., stop drawing)\r\n      // This is just a basic implementation, modify as per your requirements\r\n      // You can also update the state, etc.\r\n    };\r\n\r\n    canvas.addEventListener(\"mousedown\", handleMouseDown);\r\n    canvas.addEventListener(\"mousemove\", handleMouseMove);\r\n    canvas.addEventListener(\"mouseup\", handleMouseUp);\r\n\r\n    return () => {\r\n      canvas.removeEventListener(\"mousedown\", handleMouseDown);\r\n      canvas.removeEventListener(\"mousemove\", handleMouseMove);\r\n      canvas.removeEventListener(\"mouseup\", handleMouseUp);\r\n    };\r\n  }, [elements, tool]);\r\n\r\n  useEffect(() => {\r\n    // Draw elements on the canvas using the context API\r\n    const canvas = canvasRef.current;\r\n    const context = canvas.getContext(\"2d\");\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    elements.forEach((element) => {\r\n      if (element.type === \"pencil\") {\r\n        const stroke = getStroke(element.points);\r\n        const d = getSvgPathFromStroke(stroke);\r\n        context.fill(new Path2D(d));\r\n      }\r\n      // Add other drawing logic for different element types (lines, rectangles, etc.)\r\n    });\r\n  }, [elements]);\r\n\r\n  const getSvgPathFromStroke = (stroke) => {\r\n    // Function to convert stroke to SVG path (you can use your own method here)\r\n    // Example implementation:\r\n    if (!stroke.length) return \"\";\r\n\r\n    const d = stroke.reduce(\r\n      (acc, [x0, y0], i, arr) => {\r\n        const [x1, y1] = arr[(i + 1) % arr.length];\r\n        acc.push(x0, y0, (x0 + x1) / 2, (y0 + y1) / 2);\r\n        return acc;\r\n      },\r\n      [\"M\", ...stroke[0], \"Q\"]\r\n    );\r\n\r\n    d.push(\"Z\");\r\n    return d.join(\" \");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <canvas\r\n        ref={canvasRef}\r\n        width={800}\r\n        height={600}\r\n        style={{ border: \"1px solid black\" }}\r\n      ></canvas>\r\n      <div>\r\n        <label>\r\n          Tool:\r\n          <select\r\n            value={tool}\r\n            onChange={(e) => setTool(e.target.value)}\r\n          >\r\n            <option value=\"pencil\">Pencil</option>\r\n            {/* Add more options for different tools */}\r\n          </select>\r\n        </label>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WhiteboardRoom;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}